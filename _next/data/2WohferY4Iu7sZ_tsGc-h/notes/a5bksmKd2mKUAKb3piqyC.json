{"pageProps":{"note":{"id":"a5bksmKd2mKUAKb3piqyC","title":"Unsafe Migrations","desc":"","updated":1643538994126,"created":1643534690713,"custom":{},"fname":"dev.sql.unsafe-migrations","type":"note","vault":{"name":"main","fsPath":"main","useFMTitle":false},"contentHash":"5c835f878516ab74391a8ac9190eb1bd","links":[],"anchors":{"unsafe-migrations":{"type":"header","text":"Unsafe Migrations","value":"unsafe-migrations","line":8,"column":0,"depth":1},"adding-column-with-default-value":{"type":"header","text":"Adding Column with Default Value","value":"adding-column-with-default-value","line":14,"column":0,"depth":2},"changing-column-type":{"type":"header","text":"Changing Column Type","value":"changing-column-type","line":22,"column":0,"depth":2},"renaming-columns":{"type":"header","text":"Renaming Columns","value":"renaming-columns","line":48,"column":0,"depth":2},"renaming-tables":{"type":"header","text":"Renaming Tables","value":"renaming-tables","line":61,"column":0,"depth":2},"adding-check-constraints":{"type":"header","text":"Adding Check Constraints","value":"adding-check-constraints","line":74,"column":0,"depth":2},"setting-not-null-on-existing-column":{"type":"header","text":"Setting Not Null On Existing Column","value":"setting-not-null-on-existing-column","line":86,"column":0,"depth":2},"adding-index-non-currently-in-postgres":{"type":"header","text":"Adding Index Non-currently In Postgres","value":"adding-index-non-currently-in-postgres","line":96,"column":0,"depth":3},"linting":{"type":"header","text":"Linting","value":"linting","line":108,"column":0,"depth":2},"references":{"type":"header","text":"References","value":"references","line":112,"column":0,"depth":2}},"children":[],"parent":"G6618ThMMM11mm7FJJ8Bs","data":{}},"body":"<h1 id=\"unsafe-migrations\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#unsafe-migrations\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Unsafe Migrations</h1>\n<p>Some migrations are unsafe to run in production on large tables because they cause locks on the database. This will degrade performance and could cause downtime.</p>\n<p>These migrations can usually be done in a way that avoids downtime. Don't worry about this for smaller tables.</p>\n<h2 id=\"adding-column-with-default-value\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#adding-column-with-default-value\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Adding Column with Default Value</h2>\n<p>Causes the table to be rewritten in older versions of MySQL (blocking writes) and Postgres (blocking both reads and writes).</p>\n<p>This can be accomplished by adding the column without the default, then changing the default value later.</p>\n<p>This is safe and no workarounds are needed from MySQL 8.0.12 and Postgres 11.</p>\n<h2 id=\"changing-column-type\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#changing-column-type\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Changing Column Type</h2>\n<p>Causes the entire table to be rewritten.</p>\n<p>Blocks writes in MySQL except for the following changes which are safe:</p>\n<ul>\n<li>Increasing length limit of a <code>varchar</code> from &#x3C; 255 to 255</li>\n<li>Increasing length limit of a <code>varchar</code> from over 255 to max limit</li>\n</ul>\n<p>Blocks both reads and writes in Postgres except for the following:</p>\n<ul>\n<li>Increasing length limit of a <code>varchar</code> or removing length limits</li>\n<li>Changing <code>varchar</code> to <code>text</code></li>\n<li>Changing <code>text</code> to <code>varchar</code> with no limit</li>\n<li>For <code>decimal</code> or <code>real</code> columns, increasing precision or making them unconstrained</li>\n<li>Changing between <code>timestamp</code> and <code>timestamptz</code> column when session timezone is UTC from Postgres 12</li>\n</ul>\n<p>Instead, do the following:</p>\n<ol>\n<li>Create a new column</li>\n<li>Write to both columns</li>\n<li>Update the new column with previous data from the old column</li>\n<li>Read from the new column instead of the old column</li>\n<li>Stop writes to the old column</li>\n<li>Drop the old column</li>\n</ol>\n<h2 id=\"renaming-columns\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#renaming-columns\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Renaming Columns</h2>\n<p>Causes errors in the application if the column is still being used.</p>\n<p>Instead, do the following:</p>\n<ol>\n<li>Create a new column</li>\n<li>Write to both columns</li>\n<li>Update the new column with previous data from the old column</li>\n<li>Read from the new column instead of the old column</li>\n<li>Stop writes to the old column</li>\n<li>Drop the old column</li>\n</ol>\n<h2 id=\"renaming-tables\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#renaming-tables\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Renaming Tables</h2>\n<p>Similar to renaming columns, this causes errors if the application is still using the table.</p>\n<p>Instead, do the following:</p>\n<ol>\n<li>Create the new table</li>\n<li>Write to both tables</li>\n<li>Update the new table with previous data from the old table</li>\n<li>Read from the new table instead of the old table</li>\n<li>Stop writes to the old table</li>\n<li>Drop the old table</li>\n</ol>\n<h2 id=\"adding-check-constraints\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#adding-check-constraints\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Adding Check Constraints</h2>\n<p>Adding a check constraints causes all existing rows to be checked. This blocks writes in MySQL and both reads and writes in Postgres.</p>\n<p>In Postgres:</p>\n<ol>\n<li>\n<p>Add the constraint without validating existing rows using the <code>not valid</code> keyword. This skips enforcement of the constraint on existing data, but subsequent inserts or updates are checked.</p>\n</li>\n<li>\n<p>Validate the constraint in a separate statement for existing data: <code>ALTER TABLE my_table VALIDATE CONSTRAINT some_constraint;</code>\nPostgres acquires a SHARE UPDATE EXCLUSIVE lock while validating the constraint for existing data , so reads and writes will still go through.</p>\n<p>This 2-step process is also useful when there is existing data that violates the constraint. The process can be repeated until all violations are fixed.</p>\n</li>\n</ol>\n<h2 id=\"setting-not-null-on-existing-column\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#setting-not-null-on-existing-column\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Setting Not Null On Existing Column</h2>\n<p>Blocks reads and writes while existing rows are checked.</p>\n<p>For Postgres, do the following instead:</p>\n<ol>\n<li>Add a check constraint on the column with the <code>not valid</code> keyword to skip checks for existing rows: <code>ALTER TABLE \"my_table\" ADD CONSTRAINT \"my_constraint\" CHECK (\"some_column\" IS NOT NULL) NOT VALID;</code></li>\n<li>Validate the constraint in a separate statement for existing data: <code>ALTER TABLE my_table VALIDATE CONSTRAINT my_constraint;</code></li>\n<li>From Postgres 12, it is safe to then set <code>not null</code> on the column, then remove the check constraint.</li>\n</ol>\n<h3 id=\"adding-index-non-currently-in-postgres\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#adding-index-non-currently-in-postgres\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Adding Index Non-currently In Postgres</h3>\n<p>Normally, creating an index blocks writes till the indexx has been built. <a href=\"https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY\">Postgres supports building indixes concurrently</a> in a way that doesn't block writes:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> CONCURRENTLY some_index <span class=\"token keyword\">ON</span> my_table<span class=\"token punctuation\">(</span>some_column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>This is also applicable to adding foreign keys or references.</p>\n<p>This is not needed if the index is being created with a new table in the same migration.</p>\n<h2 id=\"linting\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#linting\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Linting</h2>\n<ul>\n<li><a href=\"https://github.com/ankane/strong_migrations#checks\">Strong Migrations</a> is a Ruby gem that can lint for such unsafe migrations</li>\n</ul>\n<h2 id=\"references\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#references\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>References</h2>\n<ul>\n<li><a href=\"https://medium.com/paypal-tech/postgresql-at-scale-database-schema-changes-without-downtime-20d3749ed680\">PostgreSQL at Scale: Database Schema Changes Without Downtime</a></li>\n<li><a href=\"https://github.com/fabianlindfors/reshape\">reshape</a> is a new tool that tries to automate unsafe migrations for Postgres</li>\n</ul>","noteIndex":{"id":"root","title":"root","desc":"","updated":1622102326440,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"name":"main","fsPath":"main","useFMTitle":false},"contentHash":"2222728f026e86e75d06a6048c4f43ed","links":[],"anchors":{"personal-knowledge-base":{"type":"header","text":"Personal Knowledge Base","value":"personal-knowledge-base","line":9,"column":0,"depth":1}},"children":["9fa47ef8-a44b-4e36-929f-4aa7835b474d","6e43ea37-b3e7-44cf-aac7-31ae947d32a2","a10a1802-11d0-4557-a374-89712109cf90","0b9beaed-19ee-4124-a880-07e520da2b17","ddf3e9b2-ea12-4129-8785-06d6b82d4fcb","WzMxuVG73mPUnzZKFLnON","b4be93a8-69e3-4427-b4cd-53593c3ab387","5bbec2d1-4abe-4a2a-8bc5-5f3d4e229766","4a064a97-3d2d-4429-9a08-5b158dc7ef35","543e830d-feac-4048-8075-58c406bc1105","8875d2cf-85f8-41e8-b16d-c3707e40d74e","8ec37b11-59ad-4ea8-82d9-3186e7e0cd29","dOehc8Yap1zIbEqLvQvOt","b58269ed-9a0e-4213-b5b0-6d59c81d9899","b4fc6d48-17ae-4764-acdb-ec0f52707860","091b67bf-8bfa-454c-bbd3-7d84d8216229","f6fbee87-be27-471c-99bd-4af45d6a3156","fb9e4130-eaf8-425d-9039-5bc2ee876f18","4fb536a9-c146-4df3-8f30-9b2fb52a77f7","WLA76504gV8TYpQZIy4dN","GM8hKOuzfjIN71jmU3Kou","21ef758d-ca84-4be0-8eed-5e95ab3b4a7e","5fb5baa9-8b3d-4044-9c03-bbabfbdfe78a","2f6af89e-df82-4144-87fc-a2be66a0e657","POgyWcSIqi29tpqfP5uyS","LALVOSu3xWHWG29NnH06b","tFAye2cBIhyuYOjBHSrpe"],"parent":null,"data":{},"body":"\n# Personal Knowledge Base\n\nHi, and welcome to [Dickson Tan's](https://neurrone.com/pages/about/) personal knowledge base.\n\nThis is an experiment in note taking with the Zettelkasten method. This site is rendered with [Dendron](https://wiki.dendron.so/) which generates backlinks and an index, and provides other convenience features.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":false,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"previewV2Enabled":false,"enablePreviewV2":true},"site":{"copyAssets":true,"siteHierarchies":["root"],"siteLastModified":true,"siteRootDir":"docs","siteUrl":"https://kb.neurrone.com","usePrettyRefs":true,"title":"Personal Knowledge Base","description":"Personal knowledge Base","author":"Dickson Tan","twitter":"neurrone","duplicateNoteBehavior":{"action":"useVault","payload":["main","health","Human Dynamics"]},"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.73.1","vaults":[{"fsPath":"human-dynamics","name":"Human Dynamics","useFMTitle":false},{"name":"govtech","fsPath":"govtech","visibility":"private","useFMTitle":false},{"name":"health","fsPath":"health","useFMTitle":false},{"name":"main","fsPath":"main","useFMTitle":false},{"name":"personal","fsPath":"personal","visibility":"private"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"disableTelemetry":true,"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableEditorDecorations":true},"preview":{"enableFMTitle":false,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false}}},"__N_SSG":true}